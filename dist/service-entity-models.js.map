{"version":3,"sources":["webpack://service-entity-models/webpack/universalModuleDefinition","webpack://service-entity-models/webpack/bootstrap","webpack://service-entity-models/external {\"commonjs\":\"next-core-model\",\"commonjs2\":\"next-core-model\",\"amd\":\"next-core-model\",\"root\":\"next-core-model\"}","webpack://service-entity-models/./src/collection/resourceCollection.js","webpack://service-entity-models/external \"http\"","webpack://service-entity-models/external \"https\"","webpack://service-entity-models/./src/collection/paginationAPIType.js","webpack://service-entity-models/./src/index.js","webpack://service-entity-models/./src/collection/entityCollection.js","webpack://service-entity-models/./src/collection/paginatedResourceCollection.js","webpack://service-entity-models/./src/collection/paginationFactory.js","webpack://service-entity-models/./src/model/entity.js","webpack://service-entity-models/./src/model/resource.js"],"names":["root","factory","exports","module","require","define","amd","this","__WEBPACK_EXTERNAL_MODULE__0__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","AbstractCollection","constructor","models","options","super","_url","_uri","uri","console","warn","sync","method","url","success","error","that","j","u","attributes","path","headers","req","secure","https","http","request","res","setEncoding","on","body","once","statusCode","e","write","toJSON","end","statusMessage","data","parsed","JSON","parse","set","fetch","save","update","destroy","PAGINATION_API","GITHUB","SOLR","DATABASE","ResourceCollection","EntityCollection","PaginatedResourceCollection","PaginationFactory","Entity","Resource","query","datasource","initialize","setDataSourceCollection","init","setDatasource","q","insert","reset","remove","Augmented","isString","setCollection","paginationConfiguration","currentPageParam","pageSizeParam","pageSize","currentPage","totalPages","setPageSize","size","refresh","setCurrentPage","page","setPaginationConfiguration","config","nextPage","previousPage","goToPage","firstPage","lastPage","type","Collection","apiType","arg","collection","AbstractModel","args","id","unset","myQuery","isFunction","Error","Array","isArray","length"],"mappings":"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","file":"service-entity-models.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"next-core-model\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"service-entity-models\", [\"next-core-model\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"service-entity-models\"] = factory(require(\"next-core-model\"));\n\telse\n\t\troot[\"service-entity-models\"] = factory(root[\"next-core-model\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE__0__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/dist/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 5);\n","module.exports = __WEBPACK_EXTERNAL_MODULE__0__;","import { AbstractCollection } from \"next-core-model\";\nimport http from \"http\";\nimport https from \"https\";\n\n/**\n * Collection class to handle REST\n * @extends AbstractCollection\n */\nclass ResourceCollection extends AbstractCollection {\n  constructor(models, options) {\n    super(models, options);\n    this.name = \"collection\";\n    this._url = \"\";\n  };\n  /**\n  * Collection name for us in a datasource or an identifier\n  * @property {string} name The name of the collection\n  */\n\n  /**\n  * @property {string} url The url for the datasource (if applicable)\n  */\n\n  /**\n  * @property uri The uri for the ResourceCollection\n  */\n\n  get uri() {\n    return this._uri;\n  };\n\n  set uri(uri) {\n    this._uri = uri;\n  };\n\n  /**\n  * @property url The url for the ResourceCollection\n  * @deprecated\n  */\n\n  get url() {\n    console.warn(\"url is deprecated, use uri instead.\");\n    return this._uri;\n  };\n\n  set url(uri) {\n    console.warn(\"url is deprecated, use uri instead.\");\n    this._uri = uri;\n  };\n\n  // need to sync\n  /**\n  * Sync method to handle REST functions for the model\n  * @param {string} method the operation to perform\n  * @param {object} options Any options to pass\n  */\n  sync(method, options) {\n    //logger.debug(\"sync \" + method);\n    if (this.url) {\n      let that = this, success, error;\n      if (options && options.success && (typeof options.success === \"function\")) {\n        success = options.success;\n      }\n      if (options && options.error && (typeof options.error === \"function\")) {\n        error = options.error;\n      }\n\n      try {\n        let j = {}, q, u = (typeof this.url === \"function\") ? this.url() : this.url;\n        if (method === \"create\") {\n          j = that.attributes;\n          let options = {\n            path: u,\n            method: \"POST\",\n            headers: {\n              \"Content-Type\": \"application/json\",\n            }\n          };\n          const h = (this.secure) ? https : http;\n\n          let req = h.request(options, (res) => {\n            //logger.debug(\"Status: \" + res.statusCode);\n            //logger.debug(\"Headers: \" + JSON.stringify(res.headers));\n            res.setEncoding(\"utf8\");\n            res.on(\"data\", (body) => {\n              //logger.debug(\"Body: \" + body);\n            });\n\n            res.once(\"end\", () => {\n              if (success) {\n                success(req.statusCode);\n              }\n            });\n          });\n          req.on(\"error\", (e) => {\n            //logger.error(\"problem with request: \" + e.message);\n            if (error) {\n              error(500, e);\n            }\n          });\n          // write data to request body\n          req.write(that.toJSON());\n          req.end();\n\n        } else if (method === \"update\") {\n          j = that.attributes;\n          let options = {\n            path: u,\n            method: \"PUT\",\n            headers: {\n              \"Content-Type\": \"application/json\",\n            }\n          };\n\n          const h = (this.secure) ? https : http;\n\n          let req = h.request(options, (res) => {\n            //logger.debug(\"Status: \" + res.statusCode);\n            //logger.debug(\"Headers: \" + JSON.stringify(res.headers));\n            res.setEncoding(\"utf8\");\n            res.on(\"data\", (body) => {\n              //logger.debug(\"Body: \" + body);\n            });\n\n            res.once(\"end\", () => {\n              if (success) {\n                success(req.statusCode, req.statusMessage);\n              }\n            });\n          });\n          req.on(\"error\", (e) => {\n            //logger.error(\"problem with request: \" + e.message);\n            if (error) {\n              error(req.statusCode, e);\n            }\n          });\n          // write data to request body\n          req.write(that.toJSON());\n          req.end();\n\n        } else if (method === \"delete\") {\n          let options = {\n            path: u,\n            method: \"DELETE\"\n          };\n\n          const h = (this.secure) ? https : http;\n\n          let req = h.request(options, (res) => {\n            //logger.debug(\"Status: \" + res.statusCode);\n            res.setEncoding(\"utf8\");\n            res.once(\"end\", () => {\n              if (success) {\n                success(req.statusCode, req.statusMessage);\n              }\n            });\n          });\n          req.on(\"error\", (e) => {\n            //logger.error(\"problem with request: \" + e.message);\n            if (error) {\n              error(500, e);\n            }\n          });\n          req.end();\n\n        } else {\n          // read\n          //logger.debug(\"reading from \" + u);\n          //logger.debug(\"have options? \" + (options));\n\n          const h = (this.secure) ? https : http;\n\n          h.get(u, (res) => {\n            let body = \"\"; // Will contain the final response\n            // Received data is a buffer.\n            // Adding it to our body\n            res.on(\"data\", (data) => {\n              body += data;\n            });\n            // After the response is completed, parse it and log it to the console\n\n            if (res.statusCode >= 200 && res.statusCode < 300) {\n              res.once(\"end\", () => {\n                //logger.debug(\"Got data: \" + body);\n                let parsed = {};\n                try {\n                  parsed = JSON.parse(body);\n                  that.set(parsed);\n                  if (success) {\n                    success(res.statusCode, res.statusMessage);\n                  }\n                } catch(e) {\n                  //logger.error(\"Not JSON response, can't add to resource.  Exception: \" + e);\n                  if (error) {\n                    error(res.statusCode, e);\n                  }\n                }\n              });\n            } else {\n              //logger.error(\"Unsuccessfull Fetch - \" + res.statusCode + \" \" + res.statusMessage);\n              if (error) {\n                error(res.statusCode, res.statusMessage);\n              }\n            }\n          })\n          // If any error has occured, log error to console\n          .once(\"error\", (e, options) => {\n            //logger.error(\"Got error: \" + e.message);\n            if (error) {\n              error(500, e);\n            }\n          });\n        }\n      } catch(e) {\n        //logger.error(\"Got exception: \" + e);\n        if (error) {\n          error(500, e);\n        }\n      }\n    } else {\n      //throw new Error(\"No url\");\n      //logger.warn();\n    }\n    return {};\n  };\n\n  /**\n  * Fetch the entity\n  * @param {object} options Any options to pass\n  */\n  fetch(options) {\n    this.sync(\"read\", options);\n  };\n  /**\n  * Save the entity\n  * @param {object} options Any options to pass\n  */\n  save(options) {\n    this.sync(\"create\", options);\n  };\n  /**\n  * Update the entity\n  * @param {object} options Any options to pass\n  */\n  update(options) {\n    this.sync(\"update\", options);\n  };\n  /**\n  * Destroy the entity\n  * @param {object} options Any options to pass\n  */\n  destroy(options) {\n    this.sync(\"delete\", options);\n  };\n};\n\nexport default ResourceCollection;\n","module.exports = require(\"http\");","module.exports = require(\"https\");","/**\n * Types of pagination API\n * @enum\n * @name PaginationFactory.type\n * @property {string} github GitHub API\n * @property {string} solr SOLR API\n * @property {string} database Database-like API\n */\nconst PAGINATION_API = {};\nPAGINATION_API.GITHUB = Symbol(\"github\");\nPAGINATION_API.SOLR = Symbol(\"solr\");\nPAGINATION_API.DATABASE = Symbol(\"database\");\n\nexport default PAGINATION_API;\n","import ResourceCollection from \"./collection/resourceCollection.js\";\nimport EntityCollection from \"./collection/entityCollection.js\";\nimport PaginatedResourceCollection from \"./collection/paginatedResourceCollection.js\";\nimport PaginationFactory from \"./collection/paginationFactory.js\";\nimport PAGINATION_API from \"./collection/paginationAPIType.js\";\nimport Entity from \"./model/entity.js\";\nimport Resource from \"./model/resource.js\";\n\nmodule.exports.ResourceCollection = ResourceCollection;\nmodule.exports.EntityCollection = EntityCollection;\nmodule.exports.PaginatedResourceCollection = PaginatedResourceCollection;\nmodule.exports.PaginationFactory = PaginationFactory;\nmodule.exports.PAGINATION_API = PAGINATION_API;\nmodule.exports.Entity = Entity;\nmodule.exports.Resource = Resource;\n","import { AbstractCollection } from \"next-core-model\";\n\n/**\n * Collection class to handle ORM to a datasource</br/>\n * <em>Note: Datasource property is required</em>\n * @extends AbstractCollection\n */\nclass EntityCollection extends AbstractCollection {\n  constructor(models, options) {\n    super(models, options);\n    if (!options) {\n      options = {};\n    }\n    this.name = (options.name) ? options.name : \"collection\";\n    this._uri = (options.uri) ? options.uri : \"\";\n    this.query = (options.query) ? options.query : null;\n    this.datasource = (options.datasource) ? options.datasource : null;\n  };\n\n  /**\n  * Collection name for us in a datasource or an identifier\n  * @property {string} name The name of the collection\n  */\n\n  /**\n  * The query to use for the query - defaults to \"id\" selection\n  * @method query The query string to use for selection\n  */\n\n  /**\n  * @property {string} url The url for the datasource (if applicable)\n  */\n\n  /**\n  * @property url Set the url for the ResourceCollection\n  * @returns {string|function} url The URL or a function to retun a URL object\n  */\n  get url() {\n    return this._url;\n  };\n\n  set url(url) {\n    this._url = url;\n  };\n\n  /**\n  * Initialize the model with needed wireing\n  * @param {object} options Any options to pass\n  */\n  initialize(options) {\n    if (options) {\n      //logger.debug(\"calling initialize with options: \" + JSON.stringify(options));\n\n      if (options.datasource) {\n        this.datasource = options.datasource;\n      }\n      if (options.query) {\n        this.query = options.query;\n      }\n      if (options.name) {\n        this.name = options.name;\n      }\n      if (options.url) {\n        this.url = options.url;\n      }\n    }\n    if (this.datasource && (this.url === \"\")) {\n      this.url =  this.datasource.url;\n    }\n\n    this.setDataSourceCollection(this.name);\n\n    this.init(options);\n  };\n  /**\n  * Custom init method for the model (called at initialize)\n  * @param {object} options Any options to pass\n  */\n  init(options) {\n  };\n  /**\n  * @property {Augmented.Service.DataSource} datasource Datasource instance\n  */\n\n  /**\n  * Set the datasource for the Collection\n  * @param {object} datasource The datasource object\n  */\n  setDatasource(datasource) {\n    this.datasource = datasource;\n  };\n  /**\n  * Sync method to handle datasource functions for the Collection\n  * @param {string} method the operation to perform\n  * @param {object} options Any options to pass\n  */\n  sync(method, options) {\n    //logger.debug(\"sync \" + method);\n    if (this.datasource) {\n      let that = this;\n      try {\n        let j = {}, q;\n        if (method === \"create\") {\n          j = this.toJSON();\n          this.datasource.insert(j, () => {\n            that.reset(j);\n            if (options && options.success && (typeof options.success === \"function\")) {\n              options.success();\n            }\n          });\n        } else if (method === \"update\") {\n          j = this.toJSON();\n          if (options && options.query) {\n            q = options.query;\n          } else {\n            q = this.query;\n          }\n\n          this.datasource.update(q, j, () => {\n            //that.reset(j);\n            if (options && options.success && (typeof options.success === \"function\")) {\n              options.success();\n            }\n          });\n        } else if (method === \"delete\") {\n          if (options && options.query) {\n            q = options.query;\n          } else {\n            q = this.query;\n          }\n          this.datasource.remove(q, () => {\n            that.reset();\n            if (options && options.success && (typeof options.success === \"function\")) {\n              options.success();\n            }\n          });\n        } else {\n          // read\n          //logger.log(\"reading\");\n\n          if (options && options.query) {\n            q = options.query;\n          } else {\n            q = this.query;\n          }\n\n          //logger.debug(\"query \" + JSON.stringify(q));\n          this.datasource.query(q, (data) => {\n            that.reset(data);\n\n            //logger.debug(\"returned: \" + JSON.stringify(data));\n            if (options && options.success && (typeof options.success === \"function\")) {\n              options.success(data);\n            }\n          });\n        }\n      } catch(e) {\n        if (options && options.error && (typeof options.error === \"function\")) {\n          options.error(e);\n        }\n        //throw(e);\n      }\n    } //else {\n      //logger.warn(\"no datasource\");\n      //}\n      return {};\n    };\n    /**\n    * Fetch the entity\n    * @param {object} options Any options to pass\n    */\n    fetch(options) {\n      this.sync(\"read\", options);\n    };\n    /**\n    * Save the entity\n    * @param {object} options Any options to pass\n    */\n    save(options) {\n      this.sync(\"create\", options);\n    };\n    /**\n    * Update the entity\n    * @param {object} options Any options to pass\n    */\n    update(options) {\n      this.sync(\"update\", options);\n    };\n    /**\n    * Destroy the entity\n    * @param {object} options Any options to pass\n    */\n    destroy(options) {\n      this.sync(\"delete\", options);\n    };\n    /**\n    * Set the DataSource Collection\n    * @param {string} name The name of the collection datasouce\n    */\n    setDataSourceCollection(name) {\n      if (name && Augmented.isString(name) && this.datasource) {\n        //logger.debug(\"service: setting collection name: \" + name);\n        this.name = name;\n        this.datasource.setCollection(name);\n      }\n    }\n  };\n\nexport default EntityCollection;\n","import ResourceCollection from \"./resourceCollection.js\";\n\n/**\n * Collection class to handle ORM to a datasource with pagination</br/>\n * <em>Note: Datasource property is required</em>\n * @extends ResourceCollection\n */\nclass PaginatedResourceCollection extends ResourceCollection {\n  constructor(models, options) {\n    super(models, options);\n    if (!options) {\n      options = {};\n    }\n    this.paginationConfiguration = {\n      currentPageParam: \"page\",\n      pageSizeParam: \"per_page\"\n    };\n\n    this.pageSize = (options.pageSize) ? options.pageSize : 20;\n    this.currentPage = (options.currentPage) ? options.currentPage : 1;\n    this.totalPages = 1; //  need to calculate later\n  };\n  /**\n   * Sets the number of items in a page\n   * @param {number} size Number of items in each page\n   */\n  setPageSize(size) {\n    if (size) {\n      this.pageSize = size;\n    }\n    this.refresh();\n  };\n  /**\n   * Sets the current page\n   * @param {number} page Current page in collection\n   */\n  setCurrentPage(page) {\n    if (!page) {\n      page = 1;\n    }\n    this.currentPage = page;\n    this.refresh();\n  };\n  /**\n   * Sets pagination configuration\n   * @param {object} config pagination configuration\n   * @private\n   */\n  setPaginationConfiguration(config) {\n    this.paginationConfiguration = config;\n  };\n  /**\n  * Fetch the entity\n  * @param {object} options Any options to pass\n  */\n  fetch(options) {\n    options = (options) ? options : {};\n    var data = (options.data || {});\n    var p = this.paginationConfiguration;\n    var d = {};\n    d[p.currentPageParam] = this.currentPage;\n    d[p.pageSizeParam] = this.pageSize;\n\n    options.data = d;\n\n    return super.fetch(options);\n  };\n  /**\n   * Moves to the next page\n   */\n  nextPage() {\n    if (this.currentPage < this.totalPages) {\n      this.currentPage = this.currentPage + 1;\n      this.refresh();\n    }\n  };\n  /**\n   * Moves to the previous page\n   */\n  previousPage() {\n    if (this.currentPage > 0) {\n      this.currentPage = this.currentPage - 1;\n      this.refresh();\n    }\n  };\n  /**\n   * Goes to page\n   * @param {number} page Page to go to\n   */\n  goToPage(page) {\n    if ((page) && (page < this.totalPages) && (page > 0)) {\n      this.currentPage = page;\n      this.refresh();\n    }\n  };\n  /**\n   * Moves to the first page\n   */\n  firstPage() {\n    this.currentPage = 1;\n    this.refresh();\n  };\n  /**\n   * Moves to the last page\n   */\n  lastPage() {\n    this.currentPage = this.totalPages;\n    this.refresh();\n  };\n  /**\n   * Refreshes the collection\n   */\n  refresh() {\n    this.fetch();\n  };\n};\n\nexport default PaginatedResourceCollection;\n","import PAGINATION_API from \"./paginationAPIType.js\";\n\n/**\n * Pagination factory for returning pagination collections of an API type\n */\nclass PaginationFactory {\n  constructor() {\n    this.type = PAGINATION_API;\n  };\n\n  /**\n   * Get a pagination collection of type\n   * @param {PAGINATION_API} Collection The collection class to enrich\n   * @param {PAGINATION_API} apiType The API type to return an instance of\n   * @param {object} args Collection arguments\n   * @static\n   * @returns {Collection} Returns a new collection with pagination configured\n   */\n  static getPaginatedCollection(Collection, apiType, data) {\n    const arg = (data) ? data : {};\n    let collection = null;\n\n    if (!apiType) {\n      apiType = PAGINATION_API.GITHUB;\n    }\n    if (apiType === PAGINATION_API.GITHUB) {\n      collection = new Collection(arg);\n      collection.setPaginationConfiguration({\n        currentPageParam: \"page\",\n        pageSizeParam: \"per_page\"\n      });\n    } else if (apiType === PAGINATION_API.SOLR) {\n      collection = new Collection(arg);\n      collection.setPaginationConfiguration({\n        currentPageParam: \"start\",\n        pageSizeParam: \"rows\"\n      });\n    } else if (apiType === PAGINATION_API.DATABASE) {\n      collection = new Collection(arg);\n      collection.setPaginationConfiguration({\n        currentPageParam: \"offset\",\n        pageSizeParam: \"limit\"\n      });\n    }\n    return collection;\n  };\n};\n\nexport default PaginationFactory;\n","import { AbstractModel } from \"next-core-model\";\n\n/**\n * Entity class to handle ORM to a datasource</br/>\n * <em>Note: Datasource property is required</em>\n *\n * @extends Model\n */\nclass Entity extends AbstractModel {\n  constructor(attributes, options, ...args) {\n    super(attributes, options, args);\n    this.id = \"\";\n    this.url = \"\";\n    this.query = {};\n    this.collection = \"collection\";\n    this.datasource = null;\n  };\n  /**\n  * The query to use for the query - defaults to \"id\" selection\n  * @method {any} query The query string to use for selection\n  */\n\n  /**\n  * @property {string|function} url The url for the datasource (if applicable)\n  */\n\n  /**\n  * @property {string} collection The collection for the datasource (if applicable)\n  */\n\n  /**\n  * Initialize the model with needed wireing\n  * @param {object} options Any options to pass\n  */\n  initialize(options) {\n    if (options) {\n      if (options.collection) {\n        this.collection = options.collection;\n      }\n      if (options.datasource) {\n        this.datasource = options.datasource;\n      }\n      if (options.url) {\n        this.url = this.datasource.url;\n      }\n      if (options.id) {\n        this.id = options.id;\n      }\n      if (options.query) {\n        this.query = options.query;\n      }\n    }\n    // don't save this as data, but properties via the object base class options copy.\n    this.unset(\"datasource\");\n    this.unset(\"url\");\n    this.unset(\"query\");\n    this.unset(\"collection\");\n    this.unset(\"id\");\n    if (this.datasource) {\n      this.datasource.setCollection(this.collection);\n    }\n    this.init(options);\n  };\n  /**\n  * Custom init method for the model (called at inititlize)\n  * @param {object} options Any options to pass\n  */\n  init(options) {\n\n  };\n  /**\n  * @property {Augmented.Service.DataSource} datasource Datasource instance\n  */\n\n  /**\n  * Sync method to handle datasource functions for the model\n  * @param {string} method the operation to perform\n  * @param {object} options Any options to pass\n  */\n  sync(method, options) {\n    //logger.debug(\"sync \" + method);\n    if (this.datasource) {\n      let that = this;\n      try {\n        let j = {}, q;\n        if (method === \"create\") {\n          j = that.attributes;\n          this.datasource.insert(j, function() {\n            that.reset(j);\n            if (options && options.success && (typeof options.success === \"function\")) {\n              options.success();\n            }\n          });\n        } else if (method === \"update\") {\n          j = that.attributes;\n\n          //logger.debug(\"The object: \" + JSON.stringify(j));\n\n          if (options && options.query) {\n            q = options.query;\n          } else {\n            q = this.query;\n          }\n\n          this.datasource.update(q, j, function() {\n            //that.reset(j);\n            if (options && options.success && (typeof options.success === \"function\")) {\n              options.success();\n            }\n          });\n        } else if (method === \"delete\") {\n          if (options && options.query) {\n            q = options.query;\n          } else {\n            q = this.query;\n          }\n          this.datasource.remove(q, function() {\n            that.reset();\n            if (options && options.success && (typeof options.success === \"function\")) {\n              options.success();\n            }\n          });\n        } else {\n          // read\n          //logger.debug(\"reading\");\n\n          if (options && options.query) {\n            q = options.query;\n          } else {\n            q = that.query;\n          }\n\n          let myQuery = q;\n          if (Augmented.isFunction(q)) {\n            let x = q();\n            //logger.debug(\"x \" + x);\n            myQuery = x;\n          }\n\n          //logger.debug(\"query \" + JSON.stringify(myQuery));\n          this.datasource.query(myQuery, function(data) {\n            if (data === null) {\n              throw new Error(\"No Data Returned!\");\n            }\n            if (Array.isArray(data) && data.length > 0) {\n              that.reset(data[0]);\n            } else if (Array.isArray(data) && data.length === 0) {\n              that.reset();\n            } else {\n              that.reset(data);\n            }\n\n            //logger.debug(\"returned: \" + JSON.stringify(data));\n            if (options && options.success && (typeof options.success === \"function\")) {\n              options.success(data);\n            }\n          });\n        }\n      } catch(e) {\n        if (options && options.error && (typeof options.error === \"function\")) {\n          options.error(e);\n        }\n        //throw(e);\n      }\n    } //else {\n      //    logger.warn(\"no datasource\");\n      //}\n    return {};\n  };\n  /**\n  * Fetch the entity\n  * @param {object} options Any options to pass\n  */\n  fetch(options) {\n    this.sync(\"read\", options);\n  };\n  /**\n  * Save the entity\n  * @param {object} options Any options to pass\n  */\n  save(options) {\n    this.sync(\"create\", options);\n  };\n  /**\n  * Update the entity\n  * @param {object} options Any options to pass\n  */\n  update(options) {\n    this.sync(\"update\", options);\n  };\n  /**\n  * Destroy the entity\n  * @param {object} options Any options to pass\n  */\n  destroy(options) {\n    this.sync(\"delete\", options);\n  };\n};\n\nexport default Entity;\n","import { AbstractModel } from \"next-core-model\";\nimport http from \"http\";\nimport https from \"https\";\n\n/**\n * Resource class to handle REST from Node</br/>\n * <em>Note: URL property is required</em>\n *\n * @extends AbstractModel\n */\nclass Resource extends AbstractModel {\n  constructor(attributes, options, ...args) {\n    super(attributes, options, args);\n    this.secure = false;\n    this.id = \"\";\n    this.url = \"\";\n  };\n  /**\n  * @property {string} secure The secure flag\n  */\n\n  /**\n  * @property {string} url The url for the REST Service\n  */\n\n  /**\n  * Initialize the model with needed wiring\n  * @param {object} options Any options to pass\n  */\n  initialize(options) {\n    //logger.log(\"initialize\");\n    if (options && options.url) {\n      this.url = options.url;\n    }\n    // don't save this as data, but properties via the object base class options copy.\n    this.unset(\"uri\");\n    this.init(options);\n  };\n  /**\n  * Custom init method for the model (called at inititlize)\n  * @param {object} options Any options to pass\n  */\n  init(options) {\n  };\n  /**\n  * Fetch the Resource\n  * @param {object} options Any options to pass\n  */\n  fetch(options) {\n    this.sync(\"read\", options);\n  };\n  /**\n  * Sync method to handle REST functions for the model\n  * @param {string} method the operation to perform\n  * @param {object} options Any options to pass\n  */\n  sync(method, options) {\n    //logger.debug(\"sync \" + method);\n    if (this.url) {\n      let that = this, success, error;\n      if (options && options.success && (typeof options.success === \"function\")) {\n        success = options.success;\n      }\n      if (options && options.error && (typeof options.error === \"function\")) {\n        error = options.error;\n      }\n\n      try {\n        let j = {}, q, u = (typeof this.url === \"function\") ? this.url() : this.url;\n        if (method === \"create\") {\n          j = that.attributes;\n          let options = {\n            path: u,\n            method: \"POST\",\n            headers: {\n              \"Content-Type\": \"application/json\",\n            }\n          };\n          const h = (this.secure) ? https : http;\n\n          let req = h.request(options, (res) => {\n            //logger.debug(\"Status: \" + res.statusCode);\n            //logger.debug(\"Headers: \" + JSON.stringify(res.headers));\n            res.setEncoding(\"utf8\");\n            res.on(\"data\", (body) => {\n              //logger.debug(\"Body: \" + body);\n            });\n\n            res.once(\"end\", () => {\n              if (success) {\n                success(req.statusCode);\n              }\n            });\n          });\n          req.on(\"error\", (e) => {\n            //logger.error(\"problem with request: \" + e.message);\n            if (error) {\n              error(500, e);\n            }\n          });\n          // write data to request body\n          req.write(that.toJSON());\n          req.end();\n\n        } else if (method === \"update\") {\n          j = that.attributes;\n          let options = {\n            path: u,\n            method: \"PUT\",\n            headers: {\n              \"Content-Type\": \"application/json\",\n            }\n          };\n\n          const h = (this.secure) ? https : http;\n\n          let req = h.request(options, (res) => {\n            //logger.debug(\"Status: \" + res.statusCode);\n            //logger.debug(\"Headers: \" + JSON.stringify(res.headers));\n            res.setEncoding(\"utf8\");\n            res.on(\"data\", (body) => {\n              //logger.debug(\"Body: \" + body);\n            });\n\n            res.once(\"end\", () => {\n              if (success) {\n                success(req.statusCode, req.statusMessage);\n              }\n            });\n          });\n          req.on(\"error\", (e) => {\n            //logger.error(\"problem with request: \" + e.message);\n            if (error) {\n              error(req.statusCode, e);\n            }\n          });\n          // write data to request body\n          req.write(that.toJSON());\n          req.end();\n\n        } else if (method === \"delete\") {\n          let options = {\n            path: u,\n            method: \"DELETE\"\n          };\n\n          const h = (this.secure) ? https : http;\n\n          let req = h.request(options, (res) => {\n            //logger.debug(\"Status: \" + res.statusCode);\n            res.setEncoding(\"utf8\");\n            res.once(\"end\", () => {\n              if (success) {\n                success(req.statusCode, req.statusMessage);\n              }\n            });\n          });\n          req.on(\"error\", (e) => {\n            //logger.error(\"problem with request: \" + e.message);\n            if (error) {\n              error(500, e);\n            }\n          });\n          req.end();\n\n        } else {\n          // read\n          //logger.debug(\"reading from \" + u);\n          //logger.debug(\"have options? \" + (options));\n\n          const h = (this.secure) ? https : http;\n\n          h.get(u, (res) => {\n            let body = \"\"; // Will contain the final response\n            // Received data is a buffer.\n            // Adding it to our body\n            res.on(\"data\", (data) => {\n              body += data;\n            });\n            // After the response is completed, parse it and log it to the console\n\n            if (res.statusCode >= 200 && res.statusCode < 300) {\n              res.once(\"end\", () => {\n                //logger.debug(\"Got data: \" + body);\n                let parsed = {};\n                try {\n                  parsed = JSON.parse(body);\n                  that.set(parsed);\n                  if (success) {\n                    success(res.statusCode, res.statusMessage);\n                  }\n                } catch(e) {\n                  //logger.error(\"Not JSON response, can't add to resource.  Exception: \" + e);\n                  if (error) {\n                    error(res.statusCode, e);\n                  }\n                }\n              });\n            } else {\n              //logger.error(\"Unsuccessfull Fetch - \" + res.statusCode + \" \" + res.statusMessage);\n              if (error) {\n                error(res.statusCode, res.statusMessage);\n              }\n            }\n          })\n          // If any error has occured, log error to console\n          .once(\"error\", (e, options) => {\n            //logger.error(\"Got error: \" + e.message);\n            if (error) {\n              error(500, e);\n            }\n          });\n        }\n      } catch(e) {\n        //logger.error(\"Got exception: \" + e);\n        if (error) {\n          error(500, e);\n        }\n      }\n    } else {\n      //throw new Error(\"No url\");\n      //logger.warn();\n    }\n    return {};\n  };\n};\n\nexport default Resource;\n"],"sourceRoot":""}